" Instalador Vundle  ------------------------------------------------------ {{{

" Instalando el gestor de plugins Vundle
let iCanHazVundle=1
let vundle_readme=expand('~/.vim/bundle/vundle/README.md')
if !filereadable(vundle_readme)
    echo "Instalando Vundle..."
    echo ""
    silent !mkdir -p ~/.vim/bundle
    silent !git clone https://github.com/gmarik/vundle ~/.vim/bundle/vundle
    let iCanHazVundle=0
endif

" Requerido para Vundle
set nocompatible
filetype off

" Añadimos al runtimepath el Vundle
set rtp+=~/.vim/bundle/vundle/
call vundle#rc()

" }}}

" Listado de Plugins ------------------------------------------------------ {{{

Bundle 'gmarik/vundle'

" Navegador de archivos NEDTree
Bundle 'scrooloose/nerdtree'

" Powerline mejorada
Bundle 'Lokaltog/powerline', { 'rtp': 'powerline/bindings/vim' }

" Tema de colores Monokai
Bundle 'sickill/vim-monokai'

" Tema de colores solarized
Bundle 'altercation/vim-colors-solarized'

" Fuzzy Finder - Buscar archivos
Bundle 'kien/ctrlp.vim'

" Commenter - Permite comentar las líneas de código
Bundle 'scrooloose/nerdcommenter'

" Autocompletado mejorado
Bundle 'AutoComplPop'

" Surround
Bundle 'tpope/vim-surround'

" Syntastic
Bundle 'scrooloose/syntastic'

" Multiple cursors
Bundle 'terryma/vim-multiple-cursors'

" Python
Bundle 'klen/python-mode'

" }}}

" Instalación inicial de los plugins  ------------------------------------- {{{

if iCanHazVundle == 0
    echo "Instalando los Plugins ..."
    echo ""
    :BundleInstall
endif

filetype plugin indent on

" }}}

" Color ------------------------------------------------------------------- {{{
syntax on
set background=light
if &term =~? 'mlterm\|xterm\|screen-256'
	let &t_Co = 256
	colorscheme monokai
else
	colorscheme solarized
endif
" }}}

" Opciones basica --------------------------------------------------------- {{{
set encoding=utf-8

set tabstop=4
set shiftwidth=4
set softtabstop=4
set expandtab
set autoindent
set smartindent

set ruler
set number
set colorcolumn=80
set nobackup
set laststatus=2
set noshowmode
set list
set listchars=tab:▸\ ,extends:❯,precedes:❮,trail:⋅
set splitbelow " Ventana nueva abajo
set splitright " Ventan nueva a la derecha.
set autoread " Recargar archivo si fue modificado fuera de vim.


" Solo mostrar el current line en la ventana actual y en normal mode.
set cursorline
augroup cline
    au!
    au WinLeave,InsertEnter * set nocursorline
    au WinEnter,InsertLeave * set cursorline
augroup END

" }}}

" Remapeo de teclas ------------------------------------------------------- {{{

let mapleader=","

" Abrir el .vimrc para editarlo.
nmap vimrc :tabnew ~/.vimrc<cr>

" Cerrar un archivo
nnoremap <leader>q <esc>:q<cr>

" Guardar archivo
noremap <F2> <esc>:w<cr>
inoremap <F2> <esc>:w<cr>
vnoremap <F2> <esc>:w<cr>

" <ESC>
inoremap kj <esc>l

" Duplicar linea
nnoremap dl :t.<CR>

" Mover linea a linea
noremap j gj
noremap k gk

" Para mover bloques de texto y lineas.
nnoremap <C-j> :m .+1<CR>==
nnoremap <C-k> :m .-2<CR>==

" Se vuelver a seleccionar el texto despues de identarlo
vnoremap < <gv
vnoremap > >gv

" Selecciona la linea actual sin seleccionar la identación.
nnoremap vv ^vg_

" Seleccionar todo el documento.
nnoremap <leader>a ggVG

" Movimiento entre los Tabs
map tn :tabn<cr>
map tp :tabp<cr>
map tm :tabm<cr>
map tt :tabnew<cr>

" Cambiar entre ventanas
noremap <TAB><TAB> <C-w><C-w>

" Se vuelver a seleccionar el texto despues de identarlo
vnoremap < <gv
vnoremap > >gv

" }}}

" Busqueda ---------------------------------------------------------------- {{{
set incsearch
set ignorecase
set hlsearch
set scrolloff=10

" Mantener en el medio la busqueda.
nnoremap n nzzzv
nnoremap N Nzzzv

" }}}

" Plugins - Configuración ------------------------------------------------- {{{
" NERDTree ---------------------------------------------------------------- {{{

" Abrir el NERDTree
noremap <F3> :NERDTreeToggle<cr>
inoremap <F3> <esc>:NERDTreeToggle<cr>

" Encuentra un archivo abierto en el NERDTree
map <F4> :NERDTreeFind<CR>

" No mostrar archivos con estas terminaciones.
let NERDTreeIgnore = ['\.pyc$', '\.pyo$']

" }}}
" Jedi -------------------------------------------------------------------- {{{
let g:jedi#goto_assignments_command = "<leader>g"
let g:jedi#goto_definitions_command = "<leader>d"
let g:jedi#usages_command = "<leader>n"
let g:jedi#completions_command = "<C-Space>"
let g:jedi#rename_command = "<leader>r"
" }}}
" Ctrl-p ------------------------------------------------------------------ {{{
let g:ctrlp_map = '<leader>e'
noremap <leader>b :CtrlPBuffer<CR>
noremap <leader>f :CtrlPLine<CR>
noremap <leader>m :CtrlPMRUFiles<CR>
"" Funcion para buscar por la palabra que se le pase
function! CtrlPWithSearchText(search_text, ctrlp_command_end)
    execute ':CtrlP' . a:ctrlp_command_end
    call feedkeys(a:search_text)
endfunction
"" Busqueda de palabras
"" Busca la palabra en el buffer
noremap <leader>wb :call CtrlPWithSearchText(expand('<cword>'), 'Buffer')<CR>
"" Busca la palabra en el Archivo
noremap <leader>wf :call CtrlPWithSearchText(expand('<cword>'), 'Line')<CR>
"" Busca la palabra como nombre de archivo
noremap <leader>we :call CtrlPWithSearchText(expand('<cword>'), '')<CR>
noremap <leader>pe :call CtrlPWithSearchText(expand('<cfile>'), '')<CR>
"" Que no cambie el working directory
let g:ctrlp_working_path_mode = 0
"" Ignorar estos archivos
let g:ctrlp_custom_ignore = {
            \ 'dir': '\v[\/](\.git|\.hg|\.svn)$',
            \ 'file': '\.pyc$\|\.pyo$',
            \ }
let ctrlp_filter_greps = "".
            \ "egrep -iv '\\.(" .
            \ "jar|class|swp|swo|log|so|o|pyc|jpe?g|png|gif|mo|po" .
            \ ")$' | " .
            \ "egrep -v '^(\\./)?(" .
            \ "deploy/|lib/|classes/|libs/|deploy/vendor/|.git/|.hg/|.svn/|.*migrations/|docs/build/" .
            \ ")'"
" }}}
" Syntastic -------------------------------------------------------------- {{{
let g:syntastic_python_checkers = ['flake8']
let g:syntastic_python_flake8_args = '--ignore=E501'
" }}}
" Multi Cursor ------------------------------------------------------------ {{{
let g:multi_cursor_next_key='<C-n>'
let g:multi_cursor_prev_key='<C-p>'
" }}}
" Python Mode ------------------------------------------------------------ {{{
" Disable lint check.
let g:pymode_lint = 0
" don't show lint result every time we save a file
let g:pymode_lint_on_write = 0
" run pep8+pyflakes+pylint validator with \8
autocmd FileType python map <buffer> <leader>8 :PymodeLint<CR>
" rules to ignore (example: "E501,W293")
let g:pymode_lint_ignore = ""
" don't add extra column for error icons (on console vim creates a 2-char-wide
" extra column)
let g:pymode_lint_signs = 0
" don't fold python code on open
let g:pymode_folding = 0
" don't load rope by default. Change to 1 to use rope
"let g:pymode_rope = 1
"let g:pymode_rope_autoimport = 1
"let g:pymode_rope_complete_on_dot = 1
" open definitions on same window, and with my custom mapping
let g:pymode_breakpoint_bind = '<leader>B'
" Virtualenv detection
let g:pymode_virtualenv = 1
" }}}
" }}}

" Folding ----------------------------------------------------------------- {{{
augroup ft_vim
    au!
    au FileType vim setlocal foldmethod=marker
    au FileType help setlocal textwidth=78
    au BufWinEnter *.txt if &ft == 'help' | wincmd L | endif
augroup END
" }}}

" Misc ----------------------------------------------------------------- {{{
" Highlight last spaces
highlight ExtraWhitespace ctermbg=red guibg=red
au InsertLeave,BufWinEnter * match ExtraWhitespace /\s\+$/
au ColorScheme * highlight ExtraWhitespace ctermbg=red guibg=red
" Remove last spaces
au BufWritePre *.txt :%s/\s\+$//e
au BufWritePre *.py :%s/\s\+$//e
au BufWritePre *.js :%s/\s\+$//e
au BufWritePre *.* :%s/\s\+$//e

" simple recursive grep
" both recursive grep commands with internal or external (fast) grep
command! -nargs=1 RecurGrep lvimgrep /<args>/gj ./**/*.* | lopen | set nowrap
command! -nargs=1 RecurGrepFast silent exec 'lgrep! <q-args> ./**/*.*' | lopen
" mappings to call them
nmap <leader>R :RecurGrep
nmap <leader>r :RecurGrepFast
" mappings to call them with the default word as search text
nmap <leader>wR :RecurGrep <cword><CR>
nmap <leader>wr :RecurGrepFast <cword><CR>
" }}}

