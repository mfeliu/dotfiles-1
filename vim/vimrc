"c no vi-compatible
set nocompatible

" Setting up Vundle - the vim plugin bundler
let iCanHazVundle=1
let vundle_readme=expand('~/.vim/bundle/vundle/README.md')
if !filereadable(vundle_readme)
    echo "Installing Vundle..."
    echo ""
    silent !mkdir -p ~/.vim/bundle
    silent !git clone https://github.com/gmarik/vundle ~/.vim/bundle/vundle
    let iCanHazVundle=0
endif

" required for vundle
filetype off

set rtp+=~/.vim/bundle/vundle/
call vundle#rc()

" let Vundle manage Vundle
" required!
Bundle 'gmarik/vundle'

" Bundles from GitHub repos:

" Surround plugin
Bundle 'tpope/vim-surround'
" Minibuffer explorer.
" Bundle 'fholgado/minibufexpl.vim'
" Better file browser
Bundle 'scrooloose/nerdtree'
" Code commenter
Bundle 'scrooloose/nerdcommenter'
" Search and read python documentation
Bundle 'fs111/pydoc.vim'
" Class/module browser
Bundle 'majutsushi/tagbar'
" Best tagbar for PHP
Bundle 'techlivezheng/tagbar-phpctags'
" Code and files fuzzy finder
Bundle 'kien/ctrlp.vim'
" PEP8 and python-flakes checker
Bundle 'nvie/vim-flake8'
" Zen coding
Bundle 'mattn/zencoding-vim'
" Git integration
Bundle 'motemen/git-vim'
" Tab list panel
Bundle 'kien/tabman.vim'
" Powerline
Bundle 'Lokaltog/vim-powerline'
" Terminal Vim with 256 colors colorscheme
Bundle 'fisadev/fisa-vim-colorscheme'
" PHP folding
Bundle 'vim-scripts/phpfolding.vim'
" Snipmate
Bundle 'msanders/snipmate.vim'

" Bundles from vim-scripts repos

" PLugin para symfony
Bundle 'soh335/vim-symfony'

" Consoles as buffers
Bundle 'Conque-Shell'
" Autocompletition
Bundle 'AutoComplPop'
" Pending tasks list
Bundle 'TaskList.vim'
" Python code checker
Bundle 'pyflakes.vim'
" Search results counter
Bundle 'IndexedSearch'
" XML/HTML tags navigation
Bundle 'matchit.zip'
Bundle 'bufexplorer.zip'
" Gvim colorscheme
Bundle 'Wombat'

" Installing plugins the first time
if iCanHazVundle == 0
    echo "Installing Bundles, please ignore key map error messages"
    echo ""
    :BundleInstall
endif

" allow plugins by file type
filetype plugin on
filetype indent on

" Indicamos al php ctags el nombre del archivo.
let g:tagbar_phpctags_bin='/usr/bin/ctags'

" tabs and spaces handling
set expandtab
set tabstop=4
set softtabstop=4
set shiftwidth=4

" tablength exceptions
autocmd FileType html setlocal shiftwidth=2 tabstop=2
autocmd FileType htmldjango setlocal shiftwidth=2 tabstop=2
autocmd FileType javascript setlocal shiftwidth=2 tabstop=2
autocmd FileType yaml setlocal tabstop=2 shiftwidth=2

" always show status bar
set ls=2

" incremental search
set incsearch

" highlighted search results
set hlsearch

" line numbers
set nu

" toggle Tagbar display
map <F5> :TagbarToggle<CR>
" autofocus on Tagbar open
let g:tagbar_autofocus = 1

" NERDTree (better file browser) toggle
map <F3> :NERDTreeToggle<CR>
map <F4> :NERDTreeFind<CR>

" tab navigation
map tn :tabn<CR>
map tp :tabp<CR>
map tm :tabm<CR>
map tt :tabnew 

" automatically close autocompletition window
autocmd CursorMovedI * if pumvisible() == 0|pclose|endif
autocmd InsertLeave * if pumvisible() == 0|pclose|endif

" old autocomplete keyboard shortcut
imap <C-J> <C-X><C-O>

" show pending tasks list
map <F6> :TaskList<CR>

" removes trailing spaces of python files
" (and restores cursor position)
autocmd BufWritePre *.py mark z | %s/ *$//e | 'z

" save as sudo
ca w!! w !sudo tee "%"

" colors and settings of autocompletition
highlight Pmenu ctermbg=4 guibg=LightGray
" highlight PmenuSel ctermbg=8 guibg=DarkBlue guifg=Red
" highlight PmenuSbar ctermbg=7 guibg=DarkGray
" highlight PmenuThumb guibg=Black
" use global scope search
let OmniCpp_GlobalScopeSearch = 1
" 0 = namespaces disabled
" 1 = search namespaces in the current buffer
" 2 = search namespaces in the current buffer and in included files
let OmniCpp_NamespaceSearch = 2
" 0 = auto
" 1 = always show all members
let OmniCpp_DisplayMode = 1
" 0 = don't show scope in abbreviation
" 1 = show scope in abbreviation and remove the last column
let OmniCpp_ShowScopeInAbbr = 0
" This option allows to display the prototype of a function in the abbreviation part of the popup menu.
" 0 = don't display prototype in abbreviation
" 1 = display prototype in abbreviation
let OmniCpp_ShowPrototypeInAbbr = 1
" This option allows to show/hide the access information ('+', '#', '-') in the popup menu.
" 0 = hide access
" 1 = show access
let OmniCpp_ShowAccess = 1
" This option can be use if you don't want to parse using namespace declarations in included files and want to add 
" namespaces that are always used in your project.
let OmniCpp_DefaultNamespaces = ["std"]
" Complete Behaviour
let OmniCpp_MayCompleteDot = 0
let OmniCpp_MayCompleteArrow = 0
let OmniCpp_MayCompleteScope = 0
" When 'completeopt' does not contain "longest", Vim automatically select the first entry of the popup menu. You can 
" change this behaviour with the OmniCpp_SelectFirstItem option.
let OmniCpp_SelectFirstItem = 0

" CtrlP (new fuzzy finder)
let g:ctrlp_map = ',e'
nmap ,g :CtrlPBufTag<CR>
nmap ,f :CtrlPLine<CR>
nmap ,m :CtrlPMRUFiles<CR>
" to be able to call CtrlP with default search text
function! CtrlPWithSearchText(search_text, ctrlp_command_end)
    execute ':CtrlP' . a:ctrlp_command_end
    call feedkeys(a:search_text)
endfunction
" CtrlP with default text
nmap ,wg :call CtrlPWithSearchText(expand('<cword>'), 'BufTag')<CR>
nmap ,wf :call CtrlPWithSearchText(expand('<cword>'), 'Line')<CR>
nmap ,d ,wg
nmap ,we :call CtrlPWithSearchText(expand('<cword>'), '')<CR>
nmap ,pe :call CtrlPWithSearchText(expand('<cfile>'), '')<CR>
" Don't change working directory
let g:ctrlp_working_path_mode = 0

" simple recursive grep
command! -nargs=1 RecurGrep lvimgrep /<args>/gj ./**/*.* | lopen | set nowrap
command! -nargs=1 RecurGrepFast exec 'lgrep! <q-args> ./**/*.*' | lopen
nmap ,R :RecurGrep 
nmap ,r :RecurGrepFast 
nmap ,wR :RecurGrep <cword><CR>
nmap ,wr :RecurGrepFast <cword><CR>

" run pep8+pyflakes validator
autocmd FileType python map <buffer> ,8 :call Flake8()<CR>
" rules to ignore (example: "E501,W293")
let g:flake8_ignore=""

" don't let pyflakes allways override the quickfix list
let g:pyflakes_use_quickfix = 0

" tabman shortcuts
let g:tabman_toggle = 'tl'
let g:tabman_focus  = 'tf'

" use 256 colors when possible
if &term =~? 'mlterm\|xterm\|screen-256'
	let &t_Co = 256
    " color
    colorscheme fisa
else
    " color
    colorscheme delek
endif

" colors for gvim
if has('gui_running')
    colorscheme wombat
endif

" when scrolling, keep cursor 3 lines away from screen border
set scrolloff=3

" autocompletition of files and commands behaves like shell
" (complete only the common part, list the options that match)
set wildmode=list:longest

" to use fancy symbols for powerline, uncomment the following line and use a
" patched font (more info on the README.rst)
" let g:Powerline_symbols = 'fancy'

" Para salir del modo de insercion
inoremap kj <ESC>l

" Con F2 guardamos el archio
imap <F2> <ESC>:w<CR>
nmap <F2> :w<CR>

" Se vuelver a seleccionar el texto despues de identarlo
vnoremap < <gv
vnoremap > >gv

" Autocompletado de PHP
autocmd FileType php set omnifunc=phpcomplete#CompletePHP


" Recargar automaticamente el .vimrc cuando se modifica
"au BufWritePost .vimrc so ~/.vimrc

" Remapear la leader key
let mapleader = ","

" Mostrar los espacios y tabuladores
set listchars=tab:▸\ ,trail:⋅

" Seleccionar todo el texto
map <Leader>a ggVG

" Editar el .vimrc
nmap vimrc :tabnew ~/.vimrc<CR>

" Duplicar una linea
nmap dl 0yyp

" Cambiar entre ventanas
nmap <TAB><TAB> <C-w><C-w>

" Menu inferior mas bonito
" set wildmenu

" Ir a definicion del metodo o clase o etc ...
imap gd <c-w><c-]>
nmap gd <c-w><c-]>

" Deshabilita la creacion de backups.
set nobackup
set nowritebackup
set noswapfile

set history=700
set undolevels=700

" Cierra todas las ventanas.
noremap <Leader>q :quit<CR>
noremap <Leader>Q :qa!<CR>

" Abrir y cerrar el autofolding de PHP
nmap <F7> <Esc>:EnablePHPFolds<cr>
nmap <F8> <Esc>:DisablePHPFolds<cr>

" Mostrar linea actual resaltada.
set cursorline
:hi CursorLine   cterm=NONE ctermbg=16 
"ctermfg=white guibg=16 guifg=white

" Abbreviation
" iab __ <?php echo __(''); ?><left><left><left><left><left><esc>P

" Ejecutar el archivo de python que se está editando.
nmap <F9> :!python %<CR>
imap <F9> <ESC>:!python %<CR>

" Que el NERDTree no muestre los .pyc
let NERDTreeIgnore = ['\.pyc$']

" Cambiar tamaño ventanas

nmap > <C-w>>
nmap < <C-w><

" Ratón en todos los modos
set mouse=a
