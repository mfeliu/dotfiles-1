" Instalador Vundle  ------------------------------------------------------ {{{

" Instalando el gestor de plugins Vundle
let iCanHazVundle=1
let vundle_readme=expand('~/.vim/bundle/vundle/README.md')
if !filereadable(vundle_readme)
    echo "Instalando Vundle..."
    echo ""
    silent !mkdir -p ~/.vim/bundle
    silent !git clone https://github.com/gmarik/vundle ~/.vim/bundle/vundle
    let iCanHazVundle=0
endif

" Requerido para Vundle
set nocompatible
filetype off

" Añadimos al runtimepath el Vundle
set rtp+=~/.vim/bundle/vundle/
call vundle#rc()

" }}}

" Listado de Plugins ------------------------------------------------------ {{{

Bundle 'gmarik/vundle'

" Navegador de archivos NEDTree
Bundle 'scrooloose/nerdtree'

" Powerline mejorada
Bundle 'Lokaltog/powerline', { 'rtp': 'powerline/bindings/vim' }

" Tema de colores Monokai
Bundle 'sickill/vim-monokai'

" Tema de colores solarized
Bundle 'altercation/vim-colors-solarized'

" Jedi
Bundle 'davidhalter/jedi-vim'

" Fuzzy Finder - Buscar archivos
Bundle 'kien/ctrlp.vim'

" }}}

" Instalación inicial de los plugins  ------------------------------------- {{{

if iCanHazVundle == 0
    echo "Instalando los Plugins ..."
    echo ""
    :BundleInstall
endif

filetype plugin indent on

" }}}

" Color ------------------------------------------------------------------- {{{
syntax on
set background=light
if &term =~? 'mlterm\|xterm\|screen-256'
	let &t_Co = 256
	colorscheme monokai
else
	colorscheme solarized
endif
" }}}

" Opciones basica --------------------------------------------------------- {{{
set encoding=utf-8
set tabstop=4
set shiftwidth=4
set expandtab
set autoindent
set smartindent
set ruler
set number
set colorcolumn=80
set nobackup
set laststatus=2
set noshowmode
set list
set listchars=tab:▸\ ,extends:❯,precedes:❮,trail:⋅
" }}}

" Remapeo de teclas ------------------------------------------------------- {{{

let mapleader=","

" Abrir el .vimrc para editarlo.
nmap vimrc :tabnew ~/.vimrc<cr>

" Cerrar un archivo
nnoremap <leader>q <esc>:q<cr>

" Guardar archivo
noremap <F2> <esc>:w<cr>
inoremap <F2> <esc>:w<cr>
vnoremap <F2> <esc>:w<cr>

" <ESC>
inoremap kj <esc>l

" Duplicar linea
nnoremap dl :t.<CR>

" Mover linea a linea
noremap j gj
noremap k gk

" Para mover bloques de texto y lineas.
nnoremap <C-j> :m .+1<CR>==
nnoremap <C-k> :m .-2<CR>==


" }}}

" Busqueda ---------------------------------------------------------------- {{{
set incsearch
set hlsearch

" Mantener en el medio la busqueda.
nnoremap n nzzzv
nnoremap N Nzzzv

" }}}

" PLugins - Configuración ------------------------------------------------- {{{
" NERDTree ---------------------------------------------------------------- {{{

" Abrir el NERDTree
noremap <F3> :NERDTreeToggle<cr>
inoremap <F3> <esc>:NERDTreeToggle<cr>

" Encuentra un archivo abierto en el NERDTree
map <F4> :NERDTreeFind<CR>

" }}}
" Jedi -------------------------------------------------------------------- {{{
let g:jedi#goto_assignments_command = "<leader>g"
let g:jedi#goto_definitions_command = "<leader>d"
let g:jedi#usages_command = "<leader>n"
let g:jedi#completions_command = "<C-Space>"
let g:jedi#rename_command = "<leader>r"
" }}}
" Ctrl-p ------------------------------------------------------------------ {{{
let g:ctrlp_map = '<leader>e'
noremap <leader>b :CtrlPBuffer<CR>
noremap <leader>f :CtrlPLine<CR>
noremap <leader>m :CtrlPMRUFiles<CR>
"" Funcion para buscar por la palabra que se le pase
function! CtrlPWithSearchText(search_text, ctrlp_command_end)
    execute ':CtrlP' . a:ctrlp_command_end
    call feedkeys(a:search_text)
endfunction
"" Busqueda de palabras
"" Busca la palabra en el buffer
noremap <leader>wb :call CtrlPWithSearchText(expand('<cword>'), 'Buffer')<CR>
"" Busca la palabra en el Archivo
noremap <leader>wf :call CtrlPWithSearchText(expand('<cword>'), 'Line')<CR>
"" Busca la palabra como nombre de archivo
noremap <leader>we :call CtrlPWithSearchText(expand('<cword>'), '')<CR>
noremap <leader>pe :call CtrlPWithSearchText(expand('<cfile>'), '')<CR>
"" Que no cambie el working directory
let g:ctrlp_working_path_mode = 0
"" Ignorar estos archivos
let g:ctrlp_custom_ignore = {
            \ 'dir': '\v[\/](\.git|\.hg|\.svn)$',
            \ 'file': '\.pyc$\|\.pyo$',
            \ }
let ctrlp_filter_greps = "".
            \ "egrep -iv '\\.(" .
            \ "jar|class|swp|swo|log|so|o|pyc|jpe?g|png|gif|mo|po" .
            \ ")$' | " .
            \ "egrep -v '^(\\./)?(" .
            \ "deploy/|lib/|classes/|libs/|deploy/vendor/|.git/|.hg/|.svn/|.*migrations/|docs/build/" .
            \ ")'"
" }}}
" }}}

" Folding ----------------------------------------------------------------- {{{
augroup ft_vim
    au!
    au FileType vim setlocal foldmethod=marker
    au FileType help setlocal textwidth=78
    au BufWinEnter *.txt if &ft == 'help' | wincmd L | endif
augroup END
" }}}

" Highlight last spaces
highlight ExtraWhitespace ctermbg=red guibg=red
au InsertLeave,BufWinEnter * match ExtraWhitespace /\s\+$/
au ColorScheme * highlight ExtraWhitespace ctermbg=red guibg=red
" Remove last spaces
au BufWritePre *.txt :%s/\s\+$//e
au BufWritePre *.py :%s/\s\+$//e
au BufWritePre *.js :%s/\s\+$//e
au BufWritePre *.* :%s/\s\+$//e
